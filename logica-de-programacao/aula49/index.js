// As v√°rias maneiras de declarar fun√ß√µes em JavaScript

// Declara√ß√£o de fun√ß√£o (function hoisting)
function falaOi() {
    console.log('Oi!');
}
falaOi();

// üí° JavaScript tem fun√ß√µes como "First-class objects"
// Ou seja, fun√ß√µes podem ser atribu√≠das a vari√°veis, passadas como argumento, retornadas de outras fun√ß√µes etc.

// üì¶ Function Expression (fun√ß√£o an√¥nima atribu√≠da a uma vari√°vel)
const souUmDado = function () { // Aqui a minha vari√°vel passou a ser uma fun√ß√£o | Essa fun√ß√£o est√° an√¥nima, pois est√° sem nome. S√≥ que no caso, a vari√°vel acaba assumindo o lugar da fun√ß√£o...
    console.log('Sou um dado.');
};

// souUmDado(); // Esta fun√ß√£o foi comentada, pois ela est√° sendo chamada na pr√≥xima fun√ß√£o.

// üß† Passando fun√ß√£o como par√¢metro
function executaFuncao(funcao) {
    console.log('Vou executar sua fun√ß√£o abaixo:');
    funcao(); // Executa a fun√ß√£o recebida como par√¢metro
}
executaFuncao(souUmDado); // Passa a function expression acima

// Arrow function = seria uma Function Expression mais curta
const funcaoArrow = () => {
    console.log('Sou uma arrow function.');
};
funcaoArrow();

// Todas essas fun√ß√µes s√£o tratadas como objeto de primeira classe, todas s√£o dados...

// üß± Fun√ß√£o dentro de um objeto (m√©todo)
const obj = {
    falar: function () {
        console.log('Estou falando...');
    }
    // Forma reduzida (sintaxe ES6+):
    // falar() {
    //     console.log('Estou falando...');
    // }
};
obj.falar();

// üîÅ Recapitulando:
// | Tipo                   | Nome                     | Pode ser invocada antes?  | Sintaxe curta?  |
// | ---------------------- | ------------------------ | ------------------------  | --------------  |
// | Function Declaration   | `function nome() {}`     | ‚úÖ                        | ‚ùå              |
// | Function Expression    | `const x = function(){}` | ‚ùå                        | ‚ùå              |
// | Arrow Function         | `const x = () => {}`     | ‚ùå                        | ‚úÖ              |
// | M√©todo em objeto (ES6) | `falar() {}`             | ‚ùå                        | ‚úÖ              |


