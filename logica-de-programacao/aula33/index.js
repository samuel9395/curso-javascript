// AtribuiÃ§Ã£o via desestruturaÃ§Ã£o (Objetos)

const pessoa = {
    nome: 'Samuel', 
    sobrenome: 'Barreto',
    idade: 31,
    endereco: {
        rua: 'Rua Cazuza',
        numero: 'nÂ°101'
    }
};
// AtribuiÃ§Ã£o via desestruturaÃ§Ã£o
// const {nome, sobrenome} = pessoa; // caso o objeto nome nÃ£o existisse, o retorno seria undefined. Sendo assim eu poderia setar um valor padrÃ£o tipo: const {nome = '', sobrenome} = pessoa; com string vazia ou algum valor...
// console.log(nome, sobrenome);

// const {
//     endereco: {rua: r = 'valor padrÃ£o', numero},
//     endereco
// } = pessoa;
// console.log(r, numero, '\n',endereco);
// // Podemos tambÃ©m especificar a chave e mudar o nome da variÃ¡vel

const {nome, ...rest} = pessoa;
console.log(nome, '\n',rest);
/**------------------------------------------------------------------------------------------------------------- */

/**
---

### ğŸ§± Objeto base

```javascript
const pessoa = {
    nome: 'Samuel', 
    sobrenome: 'Barreto',
    idade: 31,
    endereco: {
        rua: 'Rua Cazuza',
        numero: 'nÂ°101'
    }
};
```

---

### ğŸŸ¢ DesestruturaÃ§Ã£o simples com valor padrÃ£o

```javascript
const { nome = '', sobrenome } = pessoa;
```

* A variÃ¡vel `nome` recebe `'Samuel'`.
* Se `nome` **nÃ£o existisse no objeto**, ele cairia no **valor padrÃ£o `''`**.
* Muito Ãºtil para evitar `undefined`.

---

### ğŸŸ¡ DesestruturaÃ§Ã£o aninhada e renomeaÃ§Ã£o

```javascript
const {
    endereco: { rua: r = 'valor padrÃ£o', numero },
    endereco
} = pessoa;

console.log(r, numero, '\n', endereco);
```

* `rua` Ã© renomeada para `r`.
* Se `rua` **nÃ£o existisse**, `r` seria `'valor padrÃ£o'`.
* TambÃ©m extraÃ­mos o objeto `endereco` completo, caso precise dele inteiro.

---

### ğŸŸ£ Operador rest (`...rest`) na desestruturaÃ§Ã£o

```javascript
const { nome, ...rest } = pessoa;
console.log(nome, '\n', rest);
```

* Aqui, vocÃª:

  * Extrai a chave `nome`.
  * E agrupa o **restante das chaves** (`sobrenome`, `idade`, `endereco`) no objeto `rest`.
* Isso Ã© Ãºtil para **dividir dados**, como por exemplo:

  ```javascript
  const { id, ...dadosDoFormulario } = requisicao;
  ```

---

### âœ… SaÃ­da do seu `console.log` final:

```
Samuel 
{
  sobrenome: 'Barreto',
  idade: 31,
  endereco: { rua: 'Rua Cazuza', numero: 'nÂ°101' }
}
```

---
 * 
 */