// Tratando e lan√ßando erros (try, catch, throw)

// üìå Exemplo 1: Capturando erro com try...catch
// try {
//     console.log(naoExiste); // Vai gerar um ReferenceError
// } catch (error) {
//     console.log('naoExiste n√£o est√° definida'); // Mensagem personalizada
//     console.log(error); // Detalhes t√©cnicos do erro
// }

// üß† Explica√ß√£o:
// try: tenta executar o c√≥digo.
// catch: executa caso aconte√ßa algum erro dentro do bloco try.
// Isso evita que o erro pare a execu√ß√£o do restante do c√≥digo.

// üìå Exemplo 2: Validando dados e lan√ßando erro com throw
function soma(x, y) {
    if (typeof x !== 'number' || typeof y !== 'number') {
        throw new Error('x e y precisam ser n√∫meros.');
    }

    return x + y;
}
// üß† Explica√ß√£o:
// A fun√ß√£o verifica se os par√¢metros s√£o do tipo number.
// Se n√£o forem, lan√ßa um erro com throw new Error(...).
// Esse erro pode (e deve) ser tratado por quem chama a fun√ß√£o.

// ‚úÖ Uso com try...catch
try {
    console.log(soma(5, 5));      // ‚úÖ Ok: 10
    console.log(soma('5', 5));    // ‚ùå Vai lan√ßar um erro
} catch (error) {
    // console.log(error); // (t√©cnico)
    console.log('Alguma coisa mais amig√°vel para o usu√°rio.');
}
// üß† Explica√ß√£o:
// A primeira chamada √© v√°lida: 5 + 5 = 10.
// A segunda ('5' + 5) gera erro e √© capturada no catch.
// Em vez de mostrar uma mensagem t√©cnica para o usu√°rio, mostramos uma mensagem amig√°vel.