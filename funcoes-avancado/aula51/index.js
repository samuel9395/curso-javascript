// Retorno da fun√ß√£o

//‚úÖ 1. Fun√ß√£o que retorna valor
function soma(a, b) {
    return a + b; // Retorna o resultado da soma
}
console.log(soma(5, 5)); // Sa√≠da: 10

// ------------------------------------------
//‚úÖ 2. Fun√ß√£o que executa a√ß√£o mas n√£o retorna
function soma2(a, b) {
    console.log(a + b); // Apenas exibe no console, n√£o retorna valor
}
soma2(5, 2); // Sa√≠da: 7

// Exemplo de fun√ß√£o que executa a√ß√£o ao clicar no documento
// document.addEventListener('click', function () {
//     document.body.style.backgroundColor = 'red';
// });

// ------------------------------------------
//‚úÖ 3. Fun√ß√£o que retorna um objeto (Factory Function)
function criaPessoa(nome, sobrenome) {
    return{
        nome: nome, 
        sobrenome: sobrenome
    };
}

const p1 = criaPessoa('Samuel', 'Barreto');
const p2 = {
    nome: 'Noah',
    sobrenome: 'Barreto'
};

console.log('Pessoa 01: ', p1,'\nPessoa 02: ', p2);

// ------------------------------------------
//‚úÖ 4. Fun√ß√£o retornando outra fun√ß√£o (closure)
function falaFrase(comeco) {
// Retorna uma nova fun√ß√£o com acesso √† vari√°vel "comeco"
    function falaResto(resto) {
        return comeco + ' ' + resto;
    }
    return falaResto;
}

const fala = falaFrase('Ol√°'); // "comeco" √© 'Ol√°'
const resto = fala('mundo!'); // "resto" √© 'mundo!'
console.log(resto); // Sa√≠da: Ol√° mundo!

// ------------------------------------------
//‚úÖ 5. Factory de fun√ß√µes: cria fun√ß√µes multiplicadoras
// function duplica(n) {
//     return n * 2;
// }
// function triplica(n) {
//     return n * 3;
// }
// function quadriplica(n) {
//     return n * 4;
// } Ao inv√©s de usar esse tanto de fun√ß√µes eu posso fazer o seguinte;

function criaMultiplicador(multiplicador) {
    // Retorna uma fun√ß√£o que multiplica o n√∫mero por esse multiplicador
    return function (n) {
        return n * multiplicador;
    };
}
const duplica = criaMultiplicador(2);
const triplica = criaMultiplicador(3);
const quadriplica = criaMultiplicador(4);

console.log(duplica(2)); // Sa√≠da: 4
console.log(triplica(2)); // Sa√≠da: 6
console.log(quadriplica(2)); // Sa√≠da: 8
// ------------------------------------------

// üß† Conceitos importantes usados:
// ‚úÖ Return: retorna valores que podem ser usados em outras partes do c√≥digo
// ‚úÖ Fun√ß√£o factory: retorna um objeto ou outra fun√ß√£o personalizada
// ‚úÖ Fun√ß√£o de alta ordem: fun√ß√£o que recebe ou retorna outra fun√ß√£o
// ‚úÖ Closure: fun√ß√£o interna que lembra do escopo externo (ex: falaFrase)