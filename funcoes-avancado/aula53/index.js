// Closures

// Fun√ß√£o externa
function retornaFuncao() {
    const nome = 'Noah'; // Vari√°vel do escopo da fun√ß√£o retornaFuncao

    // Retorna uma fun√ß√£o interna (an√¥nima)
    return function () {
        return nome; // A fun√ß√£o interna "lembra" do escopo onde foi criada
    };
}

// A constante 'funcao' agora cont√©m a fun√ß√£o retornada por retornaFuncao
const funcao = retornaFuncao();

// Inspecionando a fun√ß√£o com console.dir para ver seu [[Scopes]]
console.dir(funcao); // Mostra a estrutura interna, incluindo o fechamento com a vari√°vel 'nome'

// üß† Explica√ß√£o
// Este √© um exemplo cl√°ssico de closure. Mesmo ap√≥s a fun√ß√£o retornaFuncao ter sido executada e encerrada, a fun√ß√£o retornada mant√©m acesso √†s vari√°veis do seu escopo l√©xico (neste caso, a vari√°vel nome).
// Isso acontece porque o JavaScript mant√©m o fechamento do escopo ‚Äî ou seja, as vari√°veis ainda s√£o acess√≠veis enquanto a fun√ß√£o retornada existir.

