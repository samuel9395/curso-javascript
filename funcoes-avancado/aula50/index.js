// Par√¢metros da fun√ß√£o

// ‚úÖ Par√¢metros e o objeto arguments
function funcao() {
    // O objeto "arguments" cont√©m todos os argumentos passados, mesmo que n√£o sejam declarados nos par√¢metros da fun√ß√£o

    let total = 0;

    // Faz a soma de todos os argumentos usando um loop for...of
    for (let argumento of arguments) {
        total += argumento;
    }

    console.log(total); // Exibe a soma dos argumentos
}

// Chamada da fun√ß√£o com 4 valores
funcao(1, 2, 5, 7); // Sa√≠da: 15

// üß† Explica√ß√£o dos conceitos:
// function funcao() pode receber argumentos, mesmo que voc√™ n√£o declare par√¢metros expl√≠citos.
// Dentro dela, o objeto arguments se comporta como um array-like object, ou seja, parece um array (tem √≠ndices e length), mas n√£o √© um array real.
// Voc√™ pode percorrer arguments com for...of para somar ou manipular os dados.

// ‚ö†Ô∏è Observa√ß√£o importante:
// const funcao = () => {
//     console.log(arguments); // ‚ùå ReferenceError
// }
// funcao(1, 2, 3);
// O c√≥digo acima lan√ßaria um erro, pois arguments n√£o existe em arrow functions.
// Para fazer algo semelhante em arrow functions, usamos o rest operator:

// ‚úÖ Fun√ß√£o com m√∫ltiplos par√¢metros
function funcao2(a, b, c, d, e, f) {
    console.log(a, b, c, d, e, f);
}
funcao2(1, 2, 3, 4); // Sa√≠da: 1 2 3 4 undefined undefined
// Explica√ß√£o:
// Voc√™ passou 4 argumentos para 6 par√¢metros. Os dois √∫ltimos (e, f) ficam como undefined.
// Isso √© perfeitamente v√°lido em JavaScript.

// üîÑ Comparando maneira antiga vs maneira moderna de valores padr√£o:
function funcao3(a, b = 2, c = 5) {
    // Maneira antiga:
    // b = b || 2; // Se `b` for falso (false, 0, '', null, undefined...), atribui 2
    console.log(a + b + c);
}
// ‚ùó Problema da maneira moderna:
// funcao3(2, '', 10); // Sa√≠da: "210"
// Explica√ß√£o:
// Aqui voc√™ passou '' (string vazia) como valor para b.
// Como b = '', e n√£o est√° undefined, o valor padr√£o 2 n√£o √© usado.
// O que acontece: a + b + c = 2 + '' + 10 ‚Üí coer√ß√£o para string ‚Üí "210" (concatena√ß√£o).

// üí° Como "pular" um valor e for√ßar uso do default?
// ‚úÖ Usar undefined explicitamente:
funcao3(2, undefined, 20); // Sa√≠da: 17 ‚Üí 2 + 2 (default) + 10 = 14

// ‚úÖ Fun√ß√£o com desestrutura√ß√£o de objeto nos par√¢metros
// A fun√ß√£o espera receber um objeto, e j√° desestrutura os valores nome, sobrenome e idade
function objetoDesestruturado({ nome, sobrenome, idade }) {
    console.log(nome, sobrenome, idade);
}
// Objeto que ser√° passado para a fun√ß√£o
let objeto = {
    nome: 'Samuel',
    sobrenome: 'Bitencourt',
    idade: 31
}
// Passa o objeto como argumento
objetoDesestruturado(objeto);
// Sa√≠da: Samuel Bitencourt 31
// üß† Vantagens dessa abordagem:
// Mais conciso: voc√™ n√£o precisa acessar objeto.nome, objeto.sobrenome, etc.
// Clareza: a fun√ß√£o j√° deixa expl√≠cito o que ela espera receber.
// Boa pr√°tica: muito usado em fun√ß√µes que lidam com configura√ß√µes ou props (ex: em React).

// ‚úÖ Fun√ß√£o com operador, acumulador e valores m√∫ltiplos (rest operator)
const conta = function (operador, acumulador, ...numeros) {
    // O par√¢metro "...numeros" ir√° reunir todos os argumentos restantes em um array
    // OBS: o rest operator deve ser o **√∫ltimo par√¢metro** da fun√ß√£o

    for (let numero of numeros) {
        // Executa a opera√ß√£o de acordo com o operador fornecido
        if (operador === '+') acumulador += numero;
        if (operador === '*') acumulador *= numero;
        if (operador === '-') acumulador -= numero;
        if (operador === '/') acumulador /= numero;
    }
    console.log(acumulador); // Mostra o resultado final
}

conta('+', 1, 20, 30, 40, 50);
// üß† O que voc√™ aprendeu aqui:
// | Conceito          | Explica√ß√£o                                                                  |
// | ----------------- | --------------------------------------------------------------------------- |
// | `...numeros`      | Rest operator ‚Üí agrupa argumentos restantes em um array                     |
// | `for...of`        | Percorre os valores do array `numeros`                                      |
// | Controle com `if` | Executa a opera√ß√£o conforme o operador (`+`, `-`, `*`, `/`)                 |
// | Flexibilidade     | A fun√ß√£o aceita qualquer n√∫mero de valores (n√£o precisa saber a quantidade) |

// üí° Alternativa mais robusta e leg√≠vel
const operacao = function (operador, acumulador, ...numeros) {
    for (let numero of numeros) {
        switch (operador) {
            case '+': acumulador += numero; break;
            case '-': acumulador -= numero; break;
            case '*': acumulador *= numero; break;
            case '/': acumulador /= numero; break;
            default:
                console.log('Operador inv√°lido!');
                return;
        }
    }

    console.log(`Resultado: ${acumulador}`);
};
operacao('+', 1, 20, 30, 40, 50);